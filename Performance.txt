Simple pure C Solution: (on tesla)
==================================
For a single packet (first from 2.5 SNR), 11 iterations to complete

Total Time     : 3661 microsec
node processing: 2222 microsec (60%)
bit estimates  : 441 microsec (12%)
transpose      : 919 microsec (25%)

For 1000 packets:
=================
 3712 msec for 1000 packets.
 1000 Successes out of 1000 packets.
 11274 cumulative iterations, or about 11.3 per packet.
Number of iterations for the first few packets:   11 11 11 12 10 10 10 10 11 11

                        ==================================

Direct C to GPU Solution: (on tesla)
==================================
For a single packet (first from 2.5 SNR), 11 iterations to complete

Total Time      : 2760.8 microsec
node processing : 220.9 microsec (8.00%)
bit estimates   : 113.8 microsec (4.12%)
transpose       : 724.4 microsec (26.24%)
Other???        : 1701.7 microsec (61.64%)

For 1000 packets:
=================
2475.005859 msec to decode 1000 packets.
 1000 Successes out of 1000 inputs.
 11274 cumulative iterations, or about 11.3 per packet.
Number of iterations for the first few packets:   11 11 11 12 10 10 10 10 11 11

                        ==================================

GPU Solution: (on kepler) with transpose in GPU
==================================
For a single packet (first from 2.5 SNR), 11 iterations to complete
Total Time      : 2750.5 microsec
node processing : 434.0 microsec (15.78%)
bit estimates   : 240.8 microsec (8.76%)
transpose       : 1293.6 microsec (47.03%)
Other???        : 782.1 microsec (28.43%)

(on tesla)
Total Time      : 1916.4 microsec
node processing : 272.7 microsec (14.23%)
bit estimates   : 145.9 microsec (7.61%)
transpose       : 1056.1 microsec (55.11%)
Other???        : 441.8 microsec (23.05%)

For 1000 packets:
=================
2152.041260 msec to decode 1000 packets.
 1000 Successes out of 1000 inputs.
 11290 cumulative iterations, or about 11.3 per packet.

(on tesla)
1645.981567 msec to decode 1000 packets.

For 10,000 packets (all on kepler):
NTHREADS = 128
===================
21251.273438 msec to decode 10000 packets.
 10000 Successes out of 10000 inputs.
 112900 cumulative iterations, or about 11.3 per packet.
Number of iterations for the first few packets:   12 10 11 10 10 10 13 10 10 12

For 10,000 packets (all on kepler):
NTHREADS = 16
===================
6 6 2560 1000
20512.851562 msec to decode 10000 packets.
 10000 Successes out of 10000 inputs.
 112900 cumulative iterations, or about 11.3 per packet.
Number of iterations for the first few packets:   12 10 11 10 10 10 13 10 10 12

For 10,000 packets (all on kepler):
NTHREADS = 4
===================
6 6 2560 1000
23885.205078 msec to decode 10000 packets.
 10000 Successes out of 10000 inputs.
 112900 cumulative iterations, or about 11.3 per packet.
Number of iterations for the first few packets:   12 10 11 10 10 10 13 10 10 12

===========================================================
===========================================================
Switched to a new LDPC code:  1024 bit rate 4/5
This is the code David has been using for his evaluation.
        Fewer bits are sent per 1024 information bits,
so the error rate is higher than the preceding tests.
This matches the results appearin the Orange Book.
===========================================================
===========================================================

Using Min_Sum algorithm (which was used in earlier tests)
===========================================================
./RunDecoder
parameters have been read.
numBits = 1408, numChecks = 384
6 18 1408 1000
6395.211914 msec to decode 1000 packets.
 890 Successes out of 1000 inputs.
 42661 cumulative iterations, or about 42.7 per packet.
Number of iterations for the first few packets:   25 11 15 26 12 10 27 28 12 24 11 13 14 16 14 12 106 201 21 17

Using optimal algorithm (tanh) - naive implementation.
=====================================================
./RunDecoder
parameters have been read.
numBits = 1408, numChecks = 384
6 18 1408 1000
5245.614746 msec to decode 1000 packets.
 945 Successes out of 1000 inputs.
 28065 cumulative iterations, or about 28.1 per packet.
Number of iterations for the first few packets:   16 11 12 17 11 8 17 17 11 13 12 13 13 13 12 10 27 28 15 12

=====================================================
Using optimal algorithm (tanh) - slightly better implementation.
        Compute product of tanh terms only once while keeping the tanhVal terms;
        then use  -2 * atanh (product/tanhVal[i]) to update eta.
        This requires checking for tanhVal[i] == 0.
=====================================================
./RunDecoder
parameters have been read.
numBits = 1408, numChecks = 384
6 18 1408 1000
4785.023926 msec to decode 1000 packets.
 942 Successes out of 1000 inputs.
 29676 cumulative iterations, or about 29.7 per packet.
Number of iterations for the first few packets:   16 10 12 16 11 9 21 19 11 16 13 14 15 15 10 12 20 39 16 13

=====================================================
Using optimal algorithm (tanh) - implementation from previous report
ONLY reduced NTHREADS  from 32 to 16.
(note, reducing down to 4 produces similar results).
Significant performance enhancement.
=====================================================
./RunDecoder
parameters have been read.
numBits = 1408, numChecks = 384
6 18 1408 1000
4110.838379 msec to decode 1000 packets.
 942 Successes out of 1000 inputs.
 29676 cumulative iterations, or about 29.7 per packet.
Number of iterations for the first few packets:   16 10 12 16 11 9 21 19 11 16 13 14 15 15 10 12 20 39 16 13

======================================================
Using optimal algorithm (tanh) -
with different method to handle  terms where tanh(...) == 0
(see previous implementation for details about this issue)
Instead counting these 0 terms, I replace each one with
a number very close to 0,  MIN_TANH_MAGNITUDE.
Dr. Perrins concurred that this is reasonable).
        This significantly reduces the number of conditionals,
which is important for GPU performance.
        Also, rather surprsingly, it correctly decodes
a few more packets  (947 :: 942) -- from exactly the same input)
and fewer average iterations.  The number of iterations
for the first 20 packets more closely matches the results
from the naive implementation -- suggesting that my
count the 0's method, was not exactly correct.
======================================================
./RunDecoder
parameters have been read.
numBits = 1408, numChecks = 384
6 18 1408 1000
3921.919678 msec to decode 1000 packets.
 947 Successes out of 1000 inputs.
 27840 cumulative iterations, or about 27.8 per packet.
Number of iterations for the first few packets:   16 11 12 17 11 8 17 17 11 13 12 13 13 13 12 10 27 28 15 12

================
December 18.  Baseline
================

kepler [1]% cd SparseMatrix2D
kepler [2]% ./RunDecoder 1024 4 5 3.0 10000
parameters have been read.
numBits = 1408, numChecks = 384
infoLeng = 1024, numParityBits = 256 (1280), numBits = 1408
maxChecksPerBit = 6 maxBitsPerCheck = 18
ebn0 = 3.000000, sigma = 0.313242
 928 Successes out of 1000 inputs (1485 msec).
 1858 Successes out of 2000 inputs (2945 msec).
 2777 Successes out of 3000 inputs (4418 msec).
 3700 Successes out of 4000 inputs (5932 msec).
 4632 Successes out of 5000 inputs (7403 msec).
 5547 Successes out of 6000 inputs (8942 msec).
 6481 Successes out of 7000 inputs (10407 msec).
 7406 Successes out of 8000 inputs (11904 msec).
 8342 Successes out of 9000 inputs (13372 msec).
 9273 Successes out of 10000 inputs (14854 msec).
14854 msec to decode 10000 packets.
 9273 Successes out of 10000 inputs.
 191189 cumulative iterations, or about 19.1 per packet.
Number of iterations for the first few packets:   26 15 15 15 8 10 16 14 19 61 15 26 13 10 18 12 14 21 49 25


#pragma unroll (6)  Does not appear to improve performance (in bitEstimates or cnpOptimalBlock)

also
using #define loop bound, and inner IF statement does not help performance.

================
Baseline.  Using cnpOptimalBlock.
================
kepler [5]% ./RunDecoder 1024 4 5 3.0 10000 50
parameters have been read.
numBits = 1408, numChecks = 384
infoLeng = 1024, numParityBits = 256 (1280), numBits = 1408
maxChecksPerBit = 6 maxBitsPerCheck = 18
ebn0 = 3.000000, sigma = 0.313242
 923 Successes out of 1000 inputs (1432 msec).
 1845 Successes out of 2000 inputs (2844 msec).
 2758 Successes out of 3000 inputs (4261 msec).
 3674 Successes out of 4000 inputs (5723 msec).
 4594 Successes out of 5000 inputs (7146 msec).
 5498 Successes out of 6000 inputs (8623 msec).
 6423 Successes out of 7000 inputs (10042 msec).
 7342 Successes out of 8000 inputs (11486 msec).
 8273 Successes out of 9000 inputs (12912 msec).
 9198 Successes out of 10000 inputs (14345 msec).
14345 msec to decode 10000 packets.
 9198 Successes out of 10000 inputs.
 183703 cumulative iterations, or about 18.4 per packet.
Number of iterations for the first few packets:   26 15 15 15 8 10 16 14 19 51 15 26 13 10 18 12 14 21 49 25
========
Same using ebno = 3.5
========
kepler [6]% ./RunDecoder 1024 4 5 3.5 10000 50
parameters have been read.
numBits = 1408, numChecks = 384
infoLeng = 1024, numParityBits = 256 (1280), numBits = 1408
maxChecksPerBit = 6 maxBitsPerCheck = 18
ebn0 = 3.500000, sigma = 0.279177
 998 Successes out of 1000 inputs (778 msec).
 1996 Successes out of 2000 inputs (1550 msec).
 2993 Successes out of 3000 inputs (2331 msec).
 3989 Successes out of 4000 inputs (3120 msec).
 4988 Successes out of 5000 inputs (3882 msec).
 5986 Successes out of 6000 inputs (4675 msec).
 6985 Successes out of 7000 inputs (5446 msec).
 7983 Successes out of 8000 inputs (6218 msec).
 8980 Successes out of 9000 inputs (7000 msec).
 9976 Successes out of 10000 inputs (7783 msec).
7783 msec to decode 10000 packets.
 9976 Successes out of 10000 inputs.
 95787 cumulative iterations, or about 9.6 per packet.
Number of iterations for the first few packets:   11 10 10 9 6 7 10 9 11 24 9 8 9 8 11 8 11 13 12 9

================
February 19.  Initial implementation using float4.
Results are consistent with earlier work,
and about twice as fast.
I have not yet investigated code optimization.
================
February 21.  Initial implementation using bundleElt as s[4].
Results are consistent with earlier work,
This seems to be as fast (or a bit faster?) than float4,
and provides more flexibility.
Still have not yet investigated code optimization.
================
kepler [12]% ./RunDecoder 1024 4 5 3.0 10000 50
parameters have been read.
SLOTS_PER_ELT = 4
numBits = 1408, numChecks = 384
infoLeng = 1024, numParityBits = 256 (1280), numBits = 1408
maxChecksPerBit = 6 maxBitsPerCheck = 18
ebn0 = 3.000000, sigma = 0.313242
 3940 Successes out of 1000 inputs (3054 msec).
 7871 Successes out of 2000 inputs (6140 msec).
 11810 Successes out of 3000 inputs (9117 msec).
 15745 Successes out of 4000 inputs (12232 msec).
 19680 Successes out of 5000 inputs (15262 msec).
 23604 Successes out of 6000 inputs (18460 msec).
 27548 Successes out of 7000 inputs (21430 msec).
 31473 Successes out of 8000 inputs (24584 msec).
 35401 Successes out of 9000 inputs (27703 msec).
 39320 Successes out of 10000 inputs (30901 msec).
30901 msec to decode 40000 packets.
 39320 Successes out of 40000 packets. (98.3%)
 163970 cumulative iterations, or about 16.4 per packet.
Number of iterations for the first few packets:   17 33 51 19 13 18 10 13 13 14 6 16 20 10 16 9 9 6 51 19

======
ebno = 3.5 (much faster)
=====
kepler [13]% ./RunDecoder 1024 4 5 3.5 10000 50
parameters have been read.
SLOTS_PER_ELT = 4
numBits = 1408, numChecks = 384
infoLeng = 1024, numParityBits = 256 (1280), numBits = 1408
maxChecksPerBit = 6 maxBitsPerCheck = 18
ebn0 = 3.500000, sigma = 0.279177
 3999 Successes out of 1000 inputs (1734 msec).
 7997 Successes out of 2000 inputs (3453 msec).
 11995 Successes out of 3000 inputs (5153 msec).
 15994 Successes out of 4000 inputs (6881 msec).
 19994 Successes out of 5000 inputs (8603 msec).
 23994 Successes out of 6000 inputs (10306 msec).
 27992 Successes out of 7000 inputs (12033 msec).
 31991 Successes out of 8000 inputs (13726 msec).
 35990 Successes out of 9000 inputs (15406 msec).
 39990 Successes out of 10000 inputs (17053 msec).
17053 msec to decode 40000 packets.
 39990 Successes out of 40000 packets. (100.0%)
 87124 cumulative iterations, or about 8.7 per packet.
Number of iterations for the first few packets:   12 6 6 8 9 23 5 5 14 14 10 8 9 4 9 16 11 7 7 10

================
February 21.  bundleElt with s[1]
functions as expected, AND is approximately as fast the
original implementation simply using floats.

================
February 21.  Initial implementation using bundleElt as s[8].
Very simple change.
Results are consistent with earlier work,
This s[8] is significantly faster than s[4]
Still have not yet investigated code optimization.
================
./RunDecoder 1024 4 5 3.0 10000 50
parameters have been read.
SLOTS_PER_ELT = 8
numBits = 1408, numChecks = 384
infoLeng = 1024, numParityBits = 256 (1280), numBits = 1408
maxChecksPerBit = 6 maxBitsPerCheck = 18
ebn0 = 3.000000, sigma = 0.313242
 7938 Successes out of 1000 inputs (4627 msec).
 15875 Successes out of 2000 inputs (9184 msec).
 23787 Successes out of 3000 inputs (14143 msec).
 31717 Successes out of 4000 inputs (18814 msec).
 39646 Successes out of 5000 inputs (23507 msec).
 47577 Successes out of 6000 inputs (28214 msec).
 55515 Successes out of 7000 inputs (32907 msec).
 63449 Successes out of 8000 inputs (37590 msec).
 71384 Successes out of 9000 inputs (42219 msec).
 79329 Successes out of 10000 inputs (46753 msec).
46753 msec to decode 80000 packets.
 79329 Successes out of 80000 packets. (99.2%)
 163901 cumulative iterations, or about 16.4 per packet.
Number of iterations for the first few packets:   19 39 10 36 27 17 10 11 51 18 11 6 11 8 13 9 6 27 7 12

======
ebno = 3.5
======
./RunDecoder 1024 4 5 3.5 10000 50
parameters have been read.
SLOTS_PER_ELT = 8
numBits = 1408, numChecks = 384
infoLeng = 1024, numParityBits = 256 (1280), numBits = 1408
maxChecksPerBit = 6 maxBitsPerCheck = 18
ebn0 = 3.500000, sigma = 0.279177
 7997 Successes out of 1000 inputs (2644 msec).
 15996 Successes out of 2000 inputs (5267 msec).
 23996 Successes out of 3000 inputs (7858 msec).
 31995 Successes out of 4000 inputs (10442 msec).
 39994 Successes out of 5000 inputs (13004 msec).
 47992 Successes out of 6000 inputs (15656 msec).
 55990 Successes out of 7000 inputs (18268 msec).
 63988 Successes out of 8000 inputs (20871 msec).
 71982 Successes out of 9000 inputs (23524 msec).
 79980 Successes out of 10000 inputs (26111 msec).
26111 msec to decode 80000 packets.
 79980 Successes out of 80000 packets. (100.0%)
 87713 cumulative iterations, or about 8.8 per packet.
Number of iterations for the first few packets:   12 33 13 5 9 9 10 9 9 9 9 7 5 11 7 8 16 19 12 8
